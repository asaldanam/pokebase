---
import { Image } from 'astro:assets';
import Logo from './assets/pokemon-logo.svg';
---

<div class="h-full w-full flex flex-col">
	<header class="bg-red-600 p-3 flex flex-col md:flex-row items-start md:items-center justify-between gap-3">
		<Image src={Logo} alt="Pokémon" height="42" />
		<div id="PokemonTableFilters" class="flex flex-wrap gap-2 max-w-full overflow-x-auto">
			<!-- Los pills de filtros se añadirán aquí dinámicamente -->
		</div>
	</header>
	<div id="PokemonTable" class="w-full flex-1"></div>
</div>

<script>
	import { AdvancedFilterModule, MultiFilterModule, SetFilterModule, TreeDataModule } from '@lib/ag-grid-enterprise';
	import {
		ClientSideRowModelModule,
		createGrid,
		DateFilterModule,
		ModuleRegistry,
		NumberFilterModule,
		TextFilterModule,
		ValidationModule,
		type GridApi,
		type FilterChangedEvent
	} from 'ag-grid-community';
	import { createPokemonTableCols } from './PokemonTable.cols';
	import { getPokemonTableData } from './PokemonTable.data';
	import { createPokemonTableTheme } from './PokemonTable.theme';
	import { createFilterPillsManager } from './PokemonTable.filters';

	if (typeof window !== 'undefined') {
		ModuleRegistry.registerModules([
			ClientSideRowModelModule,
			TreeDataModule,
			AdvancedFilterModule,
			MultiFilterModule,
			SetFilterModule,
			TextFilterModule,
			NumberFilterModule,
			DateFilterModule,
			...(process.env.NODE_ENV !== 'production' ? [ValidationModule] : [])
		]);

		const lang = navigator.language.split('-')[0] || 'en';
		const { rows, stats, types } = await getPokemonTableData({ lang });

		// Crear el manager de filtros
		const filterManager = createFilterPillsManager({ stats, types });
		let gridApi: GridApi;

		// Función para manejar cambios en los filtros
		function onFilterChanged(event: FilterChangedEvent) {
			filterManager.onFilterChanged(event);
		}

		const grid = createGrid(document.querySelector('#PokemonTable') as HTMLElement, {
			columnDefs: createPokemonTableCols({ lang, stats, types }),
			defaultColDef: { flex: 1 },
			rowHeight: 52,
			headerHeight: 36,
			rowData: rows,
			theme: createPokemonTableTheme({ mode: 'light' }),
			groupDefaultExpanded: -1,
			onFilterChanged: onFilterChanged
		});

		// Inicializar el manager de filtros
		gridApi = grid;
		filterManager.init('PokemonTableFilters', gridApi);

		// Escuchar cambios en el tema del sistema
		window
			.matchMedia('(prefers-color-scheme: dark)')
			.addEventListener('change', (e: MediaQueryListEvent | MediaQueryList) => {
				const mode = e.matches ? 'dark' : 'light';
				grid.setGridOption('theme', createPokemonTableTheme({ mode }));
			});
	}
</script>

<style is:global>
	.ag-watermark *,
	.ag-watermark::before {
		display: none !important;
		visibility: hidden !important;
		opacity: 0 !important;
	}

	.ag-cell {
		/* --ag-border-color: #f2f5f8;
		border-left: 1px solid var(--ag-border-color);
		border-bottom: 1px solid var(--ag-border-color); */
	}

	/* Estilos para los pills de filtros */
	#PokemonTableFilters {
		scrollbar-width: thin;
		scrollbar-color: rgba(255, 255, 255, 0.5) transparent;
	}

	#PokemonTableFilters::-webkit-scrollbar {
		height: 4px;
	}

	#PokemonTableFilters::-webkit-scrollbar-track {
		background: transparent;
	}

	#PokemonTableFilters::-webkit-scrollbar-thumb {
		background-color: rgba(255, 255, 255, 0.5);
		border-radius: 2px;
	}

	#PokemonTableFilters::-webkit-scrollbar-thumb:hover {
		background-color: rgba(255, 255, 255, 0.7);
	}
</style>
